from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.main_keyboard import get_main_keyboard, get_cart_keyboard

router = Router()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
user_carts = {}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
products = {
    "water_5l": {"name": "–ü–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ 5–ª", "price": 7000},
    "water_10l": {"name": "–ü–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ 10–ª", "price": 13000},
    "water_19l": {"name": "–ü–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ 19–ª", "price": 20000},
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_confirmation = State()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    product_id = callback.data.replace("add_to_cart_", "")
    
    if user_id not in user_carts:
        user_carts[user_id] = {}
    
    if product_id in user_carts[user_id]:
        user_carts[user_id][product_id] = user_carts[user_id][product_id] + 1
    else:
        user_carts[user_id][product_id] = 1
    
    await callback.answer(f"{products[product_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(callback)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(lambda c: c.data == "cart")
async def show_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_carts or not user_carts[user_id]:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n\n"
            "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        total = 0
        
        for product_id, quantity in user_carts[user_id].items():
            product_name = products[product_id]["name"]
            product_price = products[product_id]["price"]
            item_total = product_price * quantity
            total += item_total
            
            cart_text += f"‚Ä¢ {product_name} x {quantity} = {item_total} —Å—É–º\n"
        
        cart_text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} —Å—É–º"
        
        await callback.message.edit_text(
            cart_text,
            reply_markup=get_cart_keyboard()
        )
    
    await callback.answer()

# –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id in user_carts:
        user_carts[user_id] = {}
    
    await callback.message.edit_text(
        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n\n"
        "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ])
    )
    
    await state.set_state(OrderStates.waiting_for_name)
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@router.message(OrderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    
    await message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ])
    )
    
    await state.set_state(OrderStates.waiting_for_phone)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    
    await message.answer(
        "üè† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ])
    )
    
    await state.set_state(OrderStates.waiting_for_address)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    await state.update_data(address=message.text)
    user_data = await state.get_data()
    
    if user_id in user_carts and user_carts[user_id]:
        order_text = "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        order_text += f"<b>–ò–º—è:</b> {user_data['name']}\n"
        order_text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}\n"
        order_text += f"<b>–ê–¥—Ä–µ—Å:</b> {user_data['address']}\n\n"
        
        order_text += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        total = 0
        
        for product_id, quantity in user_carts[user_id].items():
            product_name = products[product_id]["name"]
            product_price = products[product_id]["price"]
            item_total = product_price * quantity
            total += item_total
            
            order_text += f"‚Ä¢ {product_name} x {quantity} = {item_total} ‚ÇΩ\n"
        
        order_text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
        
        await message.answer(
            order_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
            ])
        )
        
        await state.set_state(OrderStates.waiting_for_confirmation)
    else:
        await message.answer(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_carts:
        user_carts[user_id] = {}
    
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {user_data['name']}!\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
        "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #" + str(user_id)[-4:] + str(hash(user_data['phone']))[-4:],
        reply_markup=get_main_keyboard()
    )
    
    await state.clear()
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")